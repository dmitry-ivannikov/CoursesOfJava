
2 - helloWorld
Conf
@Configuration
@ComponentScan
Сканирование всего проекта и поиска зависимостей и конфигураций spring

@Component - говорим что это бин


Start configuration spring
/home/dimas/IdeaProjects/CoursesOfJava/Spring/Lessons/l1_hello - Модуль с maven файлом
clean package exec:java -Dexec.mainClass=base.l2_helloworld.L2_HelloWorld - путь до Main класса spring

3 - ApplicationContext
ClassPathXmlApplicationContext("config.xml") - конфигурация через xml
ClassPathXml(Web)ApplicationContext("classpath*(полезет по папкам : meta-inf, web-config и будет искать )/config.xml") - конфигурация через xml
AnnotationConfig(Web)ApplicationContext - для веба
GenericXmlApplicationContext - позволяет подгружать модули и т д

4 - bean creation

5 - Autowiring - связь бинов вложенных и неочень

6 - сканирование пакетов
в классе config @ComponentScan("com.dmitry") - Указываем пакет, можно через запятую
@ComponentScan(basePackages = "com.dmitry")//6 - говорим, что этот пакет является базовым

Но что есть basePackages?????????????????????????????????????????????77

7 - Типы autowire
   1. поле
   2. класс
   3. set

Но что лучше???????????????????????????????  https://habr.com/post/334636/

8- autowire через conf файл (если нет доступа к классу)

просто в бин в качестве параметра передаём новый экзепляр класса, либо вызываем get

9 - autowire from xml xmlns:c (c:radio-ref="BeanId")
or constuctor-arg
or <bean> <property name="baenName" ref = "beanName"> </bean>
or autowire from xml xmlns:p (p:radio-ref="BeanNmae")

10 - autowire примитивных типов 

Через xml:
<bean class="com.dmitry.impl.Toyota">
        <constructor-arg ref="AA"/>
        <property name="ownerName" value="D.I."/>
    </bean>
    <bean id = "AA" class="com.dmitry.impl.BestFm"/>

configuration on
componentScan Of  

Or
configuration of
componentScan on
and in class toyota @autowired Radio & @Value ownerName

Or set from setter

